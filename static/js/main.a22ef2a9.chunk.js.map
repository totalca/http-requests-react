{"version":3,"sources":["component/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","props","react_default","a","createElement","onSubmit","getUser","type","name","required","App","state","location","avatar_url","e","preventDefault","user","target","elements","username","value","axios","get","concat","then","res","data","_this","setState","html_url","className","component_UserForm","this","src","alt","width","height","href","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAeeA,SAbE,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,SACpBJ,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLC,KAAK,WACLC,UAAQ,IAEVP,EAAAC,EAAAC,cAAA,2BCkDSM,6MAtDbC,MAAQ,CACNH,KAAM,KACNI,SAAU,KACVC,WAAY,QAGdP,QAAU,SAACQ,GACTA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OAAOC,SAASC,SAASC,MACpCJ,GACFK,IACCC,IADD,gCAAAC,OACqCP,IACpCQ,KAAK,SAACC,GAEL,IAAMjB,EAAOiB,EAAIC,KAAKlB,KACtBmB,EAAKC,SAAS,CAAEpB,KAAMA,IAEtB,IAAMI,EAAWa,EAAIC,KAAKd,SAC1Be,EAAKC,SAAS,CAAEhB,SAAUA,IAE1B,IAAMC,EAAaY,EAAIC,KAAKb,WAC5Bc,EAAKC,SAAS,CAAEf,WAAYA,IAE5B,IAAMgB,EAAWJ,EAAIC,KAAKG,SAC1BF,EAAKC,SAAS,CAAEC,SAAUA,+EAM9B,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAAA,UAAQ0B,UAAU,cAChB5B,EAAAC,EAAAC,cAAA,MAAI0B,UAAU,aAAd,kBAEF5B,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzB,QAAS0B,KAAK1B,UACtB0B,KAAKrB,MAAME,WACTX,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,OAAK6B,IAAKD,KAAKrB,MAAME,WAAYqB,IAAI,SAASC,MAAM,QAAQC,OAAO,WACtE,KAEFJ,KAAKrB,MAAMH,KACTN,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,KAAGiC,KAAML,KAAKrB,MAAMkB,UAAU3B,EAAAC,EAAAC,cAAA,cAAS4B,KAAKrB,MAAMH,QAC3DN,EAAAC,EAAAC,cAAA,qCAEF4B,KAAKrB,MAAMC,SACTV,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,cAAS4B,KAAKrB,MAAMC,WACjC,aAhDM0B,aCOEC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.a22ef2a9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst UserForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.getUser}>\r\n      <input \r\n        type=\"text\" \r\n        name=\"username\" \r\n        required\r\n      />\r\n      <button>Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default UserForm;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport UserForm from './component/UserForm';\n\nclass App extends Component {\n  state = {\n    name: null,\n    location: null,\n    avatar_url: null\n  }\n\n  getUser = (e) => {\n    e.preventDefault();\n    const user = e.target.elements.username.value;\n    if (user) {\n      axios\n      .get(`https://api.github.com/users/${user}`)\n      .then((res) => {\n        // console.log(res);\n        const name = res.data.name;\n        this.setState({ name: name });\n\n        const location = res.data.location;\n        this.setState({ location: location });\n\n        const avatar_url = res.data.avatar_url;\n        this.setState({ avatar_url: avatar_url });\n\n        const html_url = res.data.html_url;\n        this.setState({ html_url: html_url });\n      })\n    } else return;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">HTTP Requests</h1>\n        </header>\n        <h2>Find a GitHub user</h2>\n        <UserForm getUser={this.getUser}/>\n        { this.state.avatar_url\n          ? <p><img src={this.state.avatar_url} alt=\"Avatar\" width=\"350px\" height=\"350px\"></img></p> \n          : null\n        }\n        { this.state.name\n          ? <p>Name: <a href={this.state.html_url}><strong>{this.state.name}</strong></a></p> \n          : <p>*Please enter a username</p> \n        }\n        { this.state.location\n          ? <p>Location: <strong>{this.state.location}</strong></p> \n          : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}